- extends 'exploration/base.html'

- block lextitle
    Rickshaw experiment

- block content

    %form
        <input id="artist_filter" name="artist" type="text"/>
        <input id="artist_filter_submit" type="submit" value="Filter" />

    #graph
    #slider
    #legend

- block javascript
    <link type="text/css" rel="stylesheet" href="{{ STATIC_URL }}rickshaw/rickshaw.css">
    <link type="text/css" rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.19/themes/base/jquery-ui.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.19/jquery-ui.min.js"></script>

    <script src="{{ STATIC_URL }}rickshaw/d3.v2.js" type="text/javascript"></script>
    <script src="{{ STATIC_URL }}rickshaw/d3.layout.min.js" type="text/javascript"></script>
    <script src="{{ STATIC_URL }}rickshaw/rickshaw.min.js"></script>

    :css
        .ui-slider-horizontal {
            height: 1px !important;
            border-color: #e0e0e0;
            margin-bottom: 10px;
        }
        .ui-slider-handle {
            border-color: #a0a0a0;
            height: 9px !important;
            width: 9px !important;
            top: -5px !important;
            border-radius: 6px;
            outline: none;
            cursor: pointer;
        }
        #slider {
            margin-top: 20px;
        }
        #legend {
        }

    :javascript
        var g, sd;
        $(document).ready(function() {

            var seriesData = [];
            var originalSeriesData;
            var allData = {{ year_plays|safe }};

            // First year will have to be filled with 0s at start, this year
            // will have to be padded with 0s at the end.
            var hadFirst = false;
            var thisYear = (new Date()).getFullYear();

            function nZeros(n) {
                var l = [];
                for (var i=0; i < n; i++) { l.push(0); }
                return l;
            }

            function formatSeries(data) {
                var palette = new Rickshaw.Color.Palette( { scheme: 'classic9' } );

                $.each(data, function(year, allPlays) {

                    if (!hadFirst) {
                        console.log("Padding " + year + " with zeros at start");
                        allPlays = nZeros(52 - allPlays.length).concat(allPlays);
                        hadFirst = true;
                    } else if (allPlays.length < 52) {
                        console.log("Padding " + year + " (" + allPlays.length + " weeks) with zeros at end");
                        allPlays = allPlays.concat(nZeros(52 - allPlays.length));
                    }

                    var plays = [];
                    var week  = 0;
                    var weekDate = 0;
                    var msInWeek = 60 * 60 * 24 * 7;

                    // Skipping any weeks falling in year after the 52nd.
                    for (var i=0; i < 52 /*allPlays.length*/; i++) {
                        plays.push({x: weekDate, y: allPlays[i]});
                        week++;
                        weekDate += msInWeek;
                    }
                    seriesData.push({
                        name: year,
                        data: plays,
                        color: palette.color()
                    });
                });
            }

            formatSeries(allData);
            originalSeriesData = allData;
            var graph = new Rickshaw.Graph({
                element: document.querySelector('#graph'),
                height: 500,
                series: seriesData,
                renderer: 'stack',
                stroke: true
            });
            graph.offset = 'silhouette';
            graph.render();

            var slider = new Rickshaw.Graph.RangeSlider({
            	graph: graph,
            	element: $('#slider')
            });

            var xAxis = new Rickshaw.Graph.Axis.Time({
            	graph: graph
            });
            xAxis.render();

            var legend = new Rickshaw.Graph.Legend({
                graph: graph,
                element: document.querySelector('#legend')
            });

            var order = new Rickshaw.Graph.Behavior.Series.Order({
                graph: graph,
                legend: legend
            });

            var highlighter = new Rickshaw.Graph.Behavior.Series.Highlight({
                graph: graph,
                legend: legend
            });

            $("#artist_filter_submit").click(function() {
                var artist = $("#artist_filter").val();
                if (artist !== "") {
                    $.get("{% url lastfmexplorer.views.rickshaw context.user %}", {artist: artist}, function(response) {
                        console.log(response);
                        seriesData.length = 0;
                        formatSeries(response);
                        sd = seriesData;
                        graph.update();
                    });
                } else {
                    seriesData.length = 0;
                    formatSeries(originalSeriesData);
                    graph.update();
                }
                return false;
            });
            g = graph;
            sd = seriesData;
        });